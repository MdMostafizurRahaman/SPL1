<!DOCTYPE html>
<!-- saved from url=(0064)https://www.binarytides.com/socket-programming-c-linux-tutorial/ -->
<html lang="en-US"><!--<![endif]--><head itemscope="" itemtype="http://schema.org/WebSite"><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    

        <meta name="viewport" content="width=device-width, initial-scale=1">
    
    
    <link rel="stylesheet" media="all" onload="this.onload=null;this.media=&#39;all&#39;;" id="ao_optimized_gfonts" href="./Socket programming in C on Linux - The Ultimate Guide for Beginners - BinaryTides_files/css"><link rel="profile" href="https://gmpg.org/xfn/11">
    <link rel="pingback" href="https://www.binarytides.com/blog/xmlrpc.php">

        
    <!--[if lt IE 9]>
    <script src="https://www.binarytides.com/blog/wp-content/themes/shellviz/js/html5.js" type="text/javascript"></script>
    <![endif]-->

    <meta name="robots" content="index, follow, max-image-preview:large, max-snippet:-1, max-video-preview:-1">

	<!-- This site is optimized with the Yoast SEO plugin v20.1 - https://yoast.com/wordpress/plugins/seo/ -->
	<link media="all" href="./Socket programming in C on Linux - The Ultimate Guide for Beginners - BinaryTides_files/autoptimize_8b8ba5e9a5a3adbddc698fbc8e6c1489.css" rel="stylesheet"><title>Socket programming in C on Linux - The Ultimate Guide for Beginners - BinaryTides</title>
	<link rel="canonical" href="https://www.binarytides.com/socket-programming-c-linux-tutorial/">
	<meta property="og:locale" content="en_US">
	<meta property="og:type" content="article">
	<meta property="og:title" content="Socket programming in C on Linux - The Ultimate Guide for Beginners - BinaryTides">
	<meta property="og:description" content="Learn socket programming in C on the linux platform. Write socket servers and client programs in C.">
	<meta property="og:url" content="https://www.binarytides.com/socket-programming-c-linux-tutorial/">
	<meta property="og:site_name" content="BinaryTides">
	<meta property="article:published_time" content="2011-12-24T07:59:48+00:00">
	<meta property="article:modified_time" content="2020-05-17T11:04:02+00:00">
	<meta name="author" content="Silver Moon">
	<meta name="twitter:card" content="summary_large_image">
	<meta name="twitter:label1" content="Written by">
	<meta name="twitter:data1" content="Silver Moon">
	<meta name="twitter:label2" content="Est. reading time">
	<meta name="twitter:data2" content="12 minutes">
	<script type="text/javascript" async="" src="./Socket programming in C on Linux - The Ultimate Guide for Beginners - BinaryTides_files/analytics.js.download"></script><script type="application/ld+json" class="yoast-schema-graph">{"@context":"https://schema.org","@graph":[{"@type":"WebPage","@id":"https://www.binarytides.com/socket-programming-c-linux-tutorial/","url":"https://www.binarytides.com/socket-programming-c-linux-tutorial/","name":"Socket programming in C on Linux - The Ultimate Guide for Beginners - BinaryTides","isPartOf":{"@id":"https://www.binarytides.com/#website"},"datePublished":"2011-12-24T07:59:48+00:00","dateModified":"2020-05-17T11:04:02+00:00","author":{"@id":"https://www.binarytides.com/#/schema/person/ce24c6ddfa0368f9a08bcf46505884dd"},"breadcrumb":{"@id":"https://www.binarytides.com/socket-programming-c-linux-tutorial/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https://www.binarytides.com/socket-programming-c-linux-tutorial/"]}]},{"@type":"BreadcrumbList","@id":"https://www.binarytides.com/socket-programming-c-linux-tutorial/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https://www.binarytides.com/"},{"@type":"ListItem","position":2,"name":"Socket programming in C on Linux &#8211; The Ultimate Guide for Beginners"}]},{"@type":"WebSite","@id":"https://www.binarytides.com/#website","url":"https://www.binarytides.com/","name":"BinaryTides","description":"Coding, Software, Tech and Reviews","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https://www.binarytides.com/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Person","@id":"https://www.binarytides.com/#/schema/person/ce24c6ddfa0368f9a08bcf46505884dd","name":"Silver Moon","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https://www.binarytides.com/#/schema/person/image/","url":"https://secure.gravatar.com/avatar/e23f2767e6907e798da5b28694a2bf28?s=96&r=g","contentUrl":"https://secure.gravatar.com/avatar/e23f2767e6907e798da5b28694a2bf28?s=96&r=g","caption":"Silver Moon"},"description":"A Tech Enthusiast, Blogger, Linux Fan and a Software Developer. Writes about Computer hardware, Linux and Open Source software and coding in Python, Php and Javascript. He can be reached at binarytides@gmail.com.","url":"https://www.binarytides.com/author/admin/"}]}</script>
	<!-- / Yoast SEO plugin. -->


<link rel="dns-prefetch" href="https://www.binarytides.com/">
<link href="https://fonts.gstatic.com/" crossorigin="anonymous" rel="preconnect">











<link rel="preload" as="font" id="wpzoom-social-icons-font-academicons-woff2-css" href="https://www.binarytides.com/blog/wp-content/plugins/social-icons-widget-by-wpzoom/assets/font/academicons.woff2?v=1.9.2" type="font/woff2" crossorigin="">
<link rel="preload" as="font" id="wpzoom-social-icons-font-fontawesome-3-woff2-css" href="https://www.binarytides.com/blog/wp-content/plugins/social-icons-widget-by-wpzoom/assets/font/fontawesome-webfont.woff2?v=4.7.0" type="font/woff2" crossorigin="">
<link rel="preload" as="font" id="wpzoom-social-icons-font-genericons-woff-css" href="https://www.binarytides.com/blog/wp-content/plugins/social-icons-widget-by-wpzoom/assets/font/Genericons.woff" type="font/woff" crossorigin="">
<link rel="preload" as="font" id="wpzoom-social-icons-font-socicon-woff2-css" href="https://www.binarytides.com/blog/wp-content/plugins/social-icons-widget-by-wpzoom/assets/font/socicon.woff2?v=4.2.10" type="font/woff2" crossorigin="">
<script type="text/javascript" src="./Socket programming in C on Linux - The Ultimate Guide for Beginners - BinaryTides_files/jquery.min.js.download" id="jquery-core-js"></script>

<link rel="https://api.w.org/" href="https://www.binarytides.com/wp-json/"><link rel="alternate" type="application/json" href="https://www.binarytides.com/wp-json/wp/v2/posts/1271"><link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://www.binarytides.com/blog/xmlrpc.php?rsd">
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="https://www.binarytides.com/blog/wp-includes/wlwmanifest.xml">
<meta name="generator" content="WordPress 6.1.1">
<link rel="shortlink" href="https://www.binarytides.com/?p=1271">
<link rel="alternate" type="application/json+oembed" href="https://www.binarytides.com/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fwww.binarytides.com%2Fsocket-programming-c-linux-tutorial%2F">

<!-- Schema.org markup for Google+ --> 
<meta itemprop="name" content="Socket programming in C on Linux – The Ultimate Guide for Beginners"> 
<meta itemprop="description" content="Learn socket programming in C on the linux platform. Write socket servers and client programs in C.">


<!-- Open Graph data -->
<meta property="og:title" content="Socket programming in C on Linux – The Ultimate Guide for Beginners">
<meta property="og:type" content="article">
<meta property="og:url" content="https://www.binarytides.com/socket-programming-c-linux-tutorial/">
<meta property="og:description" content="Learn socket programming in C on the linux platform. Write socket servers and client programs in C.">
<meta property="og:site_name" content="BinaryTides">

<!-- Twitter Card data -->
<meta name="twitter:card" content="summary_large_image">
<meta name="twitter:site" content="@binarytides">
<meta name="twitter:creator" content="@binarytides">
<meta name="twitter:title" content="Socket programming in C on Linux – The Ultimate Guide for Beginners">
<meta name="twitter:description" content="Learn socket programming in C on the linux platform. Write socket servers and client programs in C.">
<meta name="twitter:creator" content="@binarytides">
<!-- Twitter summary card with large image must be at least 280x150px -->

	<meta name="google-site-verification" content="raSOdoQJjGURKn_sXYoe_n3Zqslc-LFFapomtBs69nY">

<!-- Global site tag (gtag.js) - Google Analytics -->
<script async="" src="./Socket programming in C on Linux - The Ultimate Guide for Beginners - BinaryTides_files/js"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-270'+'2686-57');
</script>

<!-- BuySellAds Tag -->
<script type="text/javascript">
	(function(){
		var bsa_optimize=document.createElement('script');
		bsa_optimize.type='text/javascript';
		bsa_optimize.async=true;
		bsa_optimize.src='https://cdn4.buysellads.net/pub/binarytides.js?'+(new Date()-new Date()%600000);
		(document.getElementsByTagName('head')[0]||document.getElementsByTagName('body')[0]).appendChild(bsa_optimize);
	})();
</script><script type="text/javascript" async="" src="./Socket programming in C on Linux - The Ultimate Guide for Beginners - BinaryTides_files/binarytides.js.download"></script>

    		
		
        
    
    
    
    
        
<meta http-equiv="origin-trial" content="Az6AfRvI8mo7yiW5fLfj04W21t0ig6aMsGYpIqMTaX60H+b0DkO1uDr+7BrzMcimWzv/X7SXR8jI+uvbV0IJlwYAAACFeyJvcmlnaW4iOiJodHRwczovL2RvdWJsZWNsaWNrLm5ldDo0NDMiLCJmZWF0dXJlIjoiUHJpdmFjeVNhbmRib3hBZHNBUElzIiwiZXhwaXJ5IjoxNjgwNjUyNzk5LCJpc1N1YmRvbWFpbiI6dHJ1ZSwiaXNUaGlyZFBhcnR5Ijp0cnVlfQ=="><meta http-equiv="origin-trial" content="A+USTya+tNvDPaxUgJooz+LaVk5hPoAxpLvSxjogX4Mk8awCTQ9iop6zJ9d5ldgU7WmHqBlnQB41LHHRFxoaBwoAAACLeyJvcmlnaW4iOiJodHRwczovL2dvb2dsZXN5bmRpY2F0aW9uLmNvbTo0NDMiLCJmZWF0dXJlIjoiUHJpdmFjeVNhbmRib3hBZHNBUElzIiwiZXhwaXJ5IjoxNjgwNjUyNzk5LCJpc1N1YmRvbWFpbiI6dHJ1ZSwiaXNUaGlyZFBhcnR5Ijp0cnVlfQ=="><meta http-equiv="origin-trial" content="A7FovoGr67TUBYbnY+Z0IKoJbbmRmB8fCyirUGHavNDtD91CiGyHHSA2hDG9r9T3NjUKFi6egL3RbgTwhhcVDwUAAACLeyJvcmlnaW4iOiJodHRwczovL2dvb2dsZXRhZ3NlcnZpY2VzLmNvbTo0NDMiLCJmZWF0dXJlIjoiUHJpdmFjeVNhbmRib3hBZHNBUElzIiwiZXhwaXJ5IjoxNjgwNjUyNzk5LCJpc1N1YmRvbWFpbiI6dHJ1ZSwiaXNUaGlyZFBhcnR5Ijp0cnVlfQ=="></head>

<body data-rsssl="1" class="post-template-default single single-post postid-1271 single-format-standard oneline-header-mobile js" itemscope="" itemtype="http://schema.org/WebPage">


<div id="page" class="hfeed site-container">
	
		<div class="header-nav-wrap">
        <div class="wrap">
        <div class="box-wrap">
            
                        

<header class="site-header" itemscope="" itemtype="http://schema.org/WPHeader">
    <div class="wrap">
    <div class="box">
        <div class="title">
            <a class="site-title" href="https://www.binarytides.com/" title="BinaryTides" rel="home">
                BinaryTides            </a>
            
            <a class="site-description">Coding, Software, Tech and Reviews</a>
        </div>
    </div>
    </div>
</header>
            
                        
<nav id="site-navigation" class="nav-primary nav-menu dropdown-menu dropdown-handlers-setup" itemscope="" itemtype="http://schema.org/SiteNavigationElement" aria-label="Main Navigation">
    
    <!-- Mobile Burger -->
    <a href="https://www.binarytides.com/socket-programming-c-linux-tutorial/#menu" class="mobile-burger" id="burger-nav-primary">☰ <span class="burger-title">Menu</span></a>
    
    <div class="wrap">
    <div class="box-wrap">
        
        <a class="assistive-text" href="https://www.binarytides.com/socket-programming-c-linux-tutorial/#content" title="Skip to content">Skip to content</a>
        <ul id="menu-top" class="menu"><li id="menu-item-8158" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-8158"><a href="https://www.binarytides.com/">Home</a></li>
<li id="menu-item-8163" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-has-children menu-item-8163"><a href="https://www.binarytides.com/category/tech/">Tech</a>
<ul class="sub-menu">
	<li id="menu-item-8355" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-8355"><a href="https://www.binarytides.com/category/tech/laptops/">Laptops</a></li>
	<li id="menu-item-8349" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-8349"><a href="https://www.binarytides.com/category/tech/printers/">Printers</a></li>
	<li id="menu-item-8453" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-8453"><a href="https://www.binarytides.com/category/tech/graphics-cards/">Graphics Cards</a></li>
	<li id="menu-item-8485" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-8485"><a href="https://www.binarytides.com/category/tech/headphones/">Headphones</a></li>
	<li id="menu-item-8973" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-8973"><a href="https://www.binarytides.com/category/tech/keyboards/">Keyboards</a></li>
	<li id="menu-item-8977" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-8977"><a href="https://www.binarytides.com/category/tech/tablets/">Tablets</a></li>
	<li id="menu-item-8981" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-8981"><a href="https://www.binarytides.com/category/tech/mouse/">Mouse</a></li>
	<li id="menu-item-10143" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-10143"><a href="https://www.binarytides.com/category/tech/monitors/">Monitors</a></li>
	<li id="menu-item-14494" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-14494"><a href="https://www.binarytides.com/category/tech/cpu-coolers/">CPU Coolers</a></li>
</ul>
</li>
<li id="menu-item-11298" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-11298"><a href="https://www.binarytides.com/category/guides/">Guides</a></li>
<li id="menu-item-8159" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-has-children menu-item-8159"><a href="https://www.binarytides.com/category/linux/">Linux</a>
<ul class="sub-menu">
	<li id="menu-item-8350" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-8350"><a href="https://www.binarytides.com/category/linux/linux-commands/">Linux Commands</a></li>
	<li id="menu-item-8352" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-8352"><a href="https://www.binarytides.com/category/linux/ubuntu-2/">Ubuntu</a></li>
	<li id="menu-item-10348" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-10348"><a href="https://www.binarytides.com/category/linux/debian-linux/">Debian</a></li>
	<li id="menu-item-10349" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-10349"><a href="https://www.binarytides.com/category/linux/fedora-linux/">Fedora</a></li>
	<li id="menu-item-8354" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-8354"><a href="https://www.binarytides.com/category/linux/server-2/">Server</a></li>
	<li id="menu-item-8351" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-8351"><a href="https://www.binarytides.com/category/linux/hardware/">Hardware</a></li>
</ul>
</li>
<li id="menu-item-8161" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-8161"><a href="https://www.binarytides.com/category/windows/">Windows</a></li>
<li id="menu-item-8160" class="menu-item menu-item-type-taxonomy menu-item-object-category current-post-ancestor menu-item-has-children menu-item-8160"><a href="https://www.binarytides.com/category/programming/" class="">Coding</a>
<ul class="sub-menu" style="display: none;">
	<li id="menu-item-10351" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-10351"><a href="https://www.binarytides.com/category/programming/php-tutorials/" class="">PHP</a></li>
	<li id="menu-item-10350" class="menu-item menu-item-type-taxonomy menu-item-object-category current-post-ancestor menu-item-10350"><a href="https://www.binarytides.com/category/programming/sockets/">Socket Programming</a></li>
	<li id="menu-item-14482" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-14482"><a href="https://www.binarytides.com/category/programming/javascript/">Javascript</a></li>
	<li id="menu-item-14485" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-14485"><a href="https://www.binarytides.com/category/programming/python/">Python</a></li>
</ul>
</li>
<li id="menu-item-14480" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-14480"><a href="https://www.binarytides.com/category/security/" class="">Security</a></li>
<li id="menu-item-8353" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-8353"><a href="https://www.binarytides.com/category/general/">General</a></li>
</ul>    
    </div>
    </div>

</nav>

        
        </div>
        </div>
	</div>
	
			
	<div class="breadcrumb-wrap" itemprop="breadcrumb" itemscope="" itemtype="http://schema.org/BreadcrumbList">
        <div class="wrap">
        <div class="box-wrap">
            <ul id="breadcrumbs" class="breadcrumbs"><li class="item-home" itemprop="itemListElement" itemscope="" itemtype="http://schema.org/ListItem"><a itemprop="item" class="bread-link bread-home" href="https://www.binarytides.com/" title="Home"><span itemprop="name">Home</span></a></li><li class="separator separator-home"> &gt; </li><li class="item-cat" itemprop="itemListElement" itemscope="" itemtype="http://schema.org/ListItem"><a href="https://www.binarytides.com/category/programming/">Coding</a></li><li class="separator"> &gt; </li><li class="item-cat" itemprop="itemListElement" itemscope="" itemtype="http://schema.org/ListItem"><a href="https://www.binarytides.com/category/programming/sockets/">Socket Programming</a></li><li class="separator"> &gt; </li><li class="item-cat" itemprop="itemListElement" itemscope="" itemtype="http://schema.org/ListItem"><a href="https://www.binarytides.com/category/programming/sockets/c-sockets/">C</a></li><li class="separator"> &gt; </li><li class="item-current item-1271" itemprop="itemListElement" itemscope="" itemtype="http://schema.org/ListItem"><strong itemprop="name" class="bread-current bread-1271" title="Socket programming in C on Linux – The Ultimate Guide for Beginners">Socket programming in C on Linux – The Ultimate Guide for Beginners</strong></li></ul>        </div>
        </div>
	</div>
	
		
	    <div id="main" class="wrapper site-inner site">
                <div class="wrap">
        <div class="box-wrap"> 

<main id="primary" class="site-content" itemscope="" itemprop="mainContentOfPage" itemtype="http://schema.org/WebPageElement">
    <div class="content" id="content" role="main">
        
        <article id="post-1271" class="post-1271 post type-post status-publish format-standard hentry category-c-sockets tag-c-sockets-2 tag-network-programming tag-socket-programming">
	
		
	<header class="entry-header">
		<h1 class="entry-title">Socket programming in C on Linux – The Ultimate Guide for Beginners</h1>
        
                <div class="below-title-meta">
		<div class="adt">
		By        	<span class="author">
                <a href="https://www.binarytides.com/author/admin/" title="Posts by Silver Moon" rel="author">Silver Moon</a>        	</span>
        	<span class="meta-sep">|</span> 
                May 17, 2020 
        	</div>
	
        <div class="adt-comment">
		<a class="link-comments" href="https://www.binarytides.com/socket-programming-c-linux-tutorial/#comments">
            152 Comments		</a> 
        </div>       
     	</div><!-- below title meta end -->
	
	</header>
	
		<div class="entry-content">
		<h3>TCP/IP socket programming in C</h3>
<p>This is a quick tutorial on <b>socket programming in c</b> language on a Linux system. "Linux" because the code snippets shown over here will work only on a Linux system and not on Windows. The <a href="https://www.binarytides.com/winsock-socket-programming-tutorial/">windows api to socket programming</a> is called winsock and we shall go through it in another tutorial.</p>		<div class="display-ad-unit mobile-wide bsa" style="background:#fff3f3; height:315px;">
	<!-- BinaryTides_S2S_InContent_ROS_Pos1 -->
<div id="bsa-zone_1611170977806-3_123456"></div>
</div>
<!-- Time : 7.0095062255859E-5, Pos : 419 -->


<p>Sockets are the "virtual" endpoints of any kind of network communications done between 2 hosts over in a network. For example when you type www.google.com in your web browser, it opens a socket and connects to google.com to fetch the page and show it to you. Same with any chat client like gtalk or skype. Any network communication goes through a socket.</p>
<p>The socket api on linux is similar to bsd/unix sockets from which it has evolved. Although over time the api has become slightly different at few places. And now the newer official standard is <a href="https://en.wikipedia.org/wiki/POSIX">posix sockets api</a> which is same as bsd sockets. </p>
<p>This tutorial assumes that you have basic knowledge of C and pointers. You will need to have <strong>gcc compiler</strong> installed on your <strong>Linux system</strong>. An IDE along with gcc would be great. I would recommend geany as you can quickly edit and run single file programs in it without much configurations. On ubuntu you can do a sudo apt-get install geany on the terminal.</p>
<p>All along the tutorial there are code snippets to demonstrate some concepts. You can run those code snippets in geany rightaway and test the results to better understand the concepts.</p>
<h3>1. Create a socket</h3>
<p>This first thing to do is create a socket. The <strong>socket</strong> function does this.<br>
Here is a code sample :</p>
<pre class="source-code">#include&lt;stdio.h&gt;
#include&lt;sys/socket.h&gt; 

int main(int argc , char *argv[])
{
	int socket_desc;
	socket_desc = socket(AF_INET , SOCK_STREAM , 0);
	
	if (socket_desc == -1)
	{
		printf("Could not create socket");
	}
	
	return 0;
}</pre>
<p>Function socket() creates a socket and returns a descriptor which can be used in other functions. The above code will create a socket with following properties</p>
<pre class="highlight  ">Address Family - AF_INET (this is IP version 4)
Type - SOCK_STREAM (this means connection oriented TCP protocol)
Protocol - 0 [ or IPPROTO_IP This is IP protocol]</pre>
<p>Next we shall try to connect to some server using this socket.<br>
We can connect to www.google.com</p>
<p><b>Note</b></p>
<p>Apart from SOCK_STREAM type of sockets there is another type called SOCK_DGRAM which indicates the <strong>UDP protocol</strong>. This type of socket is non-connection socket. In this tutorial we shall stick to SOCK_STREAM or TCP sockets.</p>
<h3>2. Connect socket to a server</h3>
<p>We connect to a remote server on a certain port number. So we need 2 things, <strong>ip address</strong> and <strong>port number</strong> to connect to.</p>
<p>To connect to a remote server we need to do a couple of things. First is to create a sockaddr_in structure with proper values.</p>
<pre class="pre_text">struct sockaddr_in server;</pre>
<p>Have a look at the structure</p>
<pre class="source-code">// IPv4 AF_INET sockets:
struct sockaddr_in {
    short            sin_family;   // e.g. AF_INET, AF_INET6
    unsigned short   sin_port;     // e.g. htons(3490)
    struct in_addr   sin_addr;     // see struct in_addr, below
    char             sin_zero[8];  // zero this if you want to
};

struct in_addr {
    unsigned long s_addr;          // load with inet_pton()
};

struct sockaddr {
    unsigned short    sa_family;    // address family, AF_xxx
    char              sa_data[14];  // 14 bytes of protocol address
};</pre>		<div class="display-ad-unit mobile-wide bsa" style="background:#fff3f3; height:315px;">
	<!-- BinaryTides_S2S_InContent_ROS_Pos2 -->
<div id="bsa-zone_1611334361252-4_123456"></div>
</div>
<!-- Time : 0.00011396408081055, Pos : 4093 -->


<p>The sockaddr_in has a member called sin_addr of type in_addr which has a s_addr which is nothing but a long. It contains the IP address in long format.</p>
<p>Function <code>inet_addr</code> is a very handy function to convert an IP address to a long format. This is how you do it :</p>
<pre class="source-code">server.sin_addr.s_addr = inet_addr("74.125.235.20");</pre>
<p>So you need to know the IP address of the remote server you are connecting to. Here we used the ip address of google.com as a sample. A little later on we shall see how to find out the ip address of a given domain name.</p>
<p>The last thing needed is the <b>connect</b> function. It needs a socket and a sockaddr structure to connect to. Here is a code sample.</p>
<pre class="source-code">#include&lt;stdio.h&gt;
#include&lt;sys/socket.h&gt;
#include&lt;arpa/inet.h&gt;	//inet_addr

int main(int argc , char *argv[])
{
	int socket_desc;
	struct sockaddr_in server;
	
	//Create socket
	socket_desc = socket(AF_INET , SOCK_STREAM , 0);
	if (socket_desc == -1)
	{
		printf("Could not create socket");
	}
		
	server.sin_addr.s_addr = inet_addr("74.125.235.20");
	server.sin_family = AF_INET;
	server.sin_port = htons( 80 );

	//Connect to remote server
	if (connect(socket_desc , (struct sockaddr *)&amp;server , sizeof(server)) &lt; 0)
	{
		puts("connect error");
		return 1;
	}
	
	puts("Connected");
	return 0;
}</pre>
<p>It cannot be any simpler. It creates a socket and then connects. If you run the program it should show Connected.<br>
Try connecting to a port different from port 80 and you should not be able to connect which indicates that the port is not open for connection.</p>
<p>OK , so we are now connected. Lets do the next thing , sending some data to the remote server.</p>
<p><b>Connections are present only in tcp sockets</b></p>
<p>The concept of "connections" apply to SOCK_STREAM/TCP type of sockets. Connection means a reliable "stream" of data such that there can be multiple such streams each having communication of its own. Think of this as a pipe which is not interfered by other data.</p>
<p>Other sockets like UDP , ICMP , ARP dont have a concept of "connection". These are non-connection based communication. Which means you keep sending or receiving packets from anybody and everybody.</p>
<h3>3. Send data over socket</h3>
<p>Function <code>send</code> will simply send data. It needs the socket descriptor , the data to send and its size.<br>
Here is a very simple example of sending some data to google.com ip :</p>
<pre class="source-code">#include&lt;stdio.h&gt;
#include&lt;string.h&gt;	//strlen
#include&lt;sys/socket.h&gt;
#include&lt;arpa/inet.h&gt;	//inet_addr

int main(int argc , char *argv[])
{
	int socket_desc;
	struct sockaddr_in server;
	char *message;
	
	//Create socket
	socket_desc = socket(AF_INET , SOCK_STREAM , 0);
	if (socket_desc == -1)
	{
		printf("Could not create socket");
	}
		
	server.sin_addr.s_addr = inet_addr("74.125.235.20");
	server.sin_family = AF_INET;
	server.sin_port = htons( 80 );

	//Connect to remote server
	if (connect(socket_desc , (struct sockaddr *)&amp;server , sizeof(server)) &lt; 0)
	{
		puts("connect error");
		return 1;
	}
	
	puts("Connected\n");
	
	//Send some data
	message = "GET / HTTP/1.1\r\n\r\n";
	if( send(socket_desc , message , strlen(message) , 0) &lt; 0)
	{
		puts("Send failed");
		return 1;
	}
	puts("Data Send\n");
	
	return 0;
}</pre>		<div class="display-ad-unit mobile-wide bsa" style="background:#fff3f3; height:315px;">
<!-- BinaryTides_S2S_InContent_ROS_Pos3 -->

<div id="bsa-zone_1672330111515-1_123456"></div>
</div>
<!-- Time : 0.00026702880859375, Pos : 7947 -->


<p>In the above example , we first connect to an ip address and then send the string message "GET / HTTP/1.1\r\n\r\n" to it.<br>
The message is actually a http command to fetch the mainpage of a website.</p>
<p>Now that we have send some data , its time to receive a reply from the server. So lets do it.</p>
<p><b>Note</b></p>
<p>When sending data to a socket you are basically writing data to that socket. This is similar to writing data to a file. Hence you can also use the <code>write</code> function to send data to a socket. Later in this tutorial we shall use write function to send data.</p>
<h3>4. Receive data on socket</h3>
<p>Function <code>recv</code> is used to receive data on a socket. In the following example we shall send the same message as the last example and receive a reply from the server.</p>
<pre class="source-code">#include&lt;stdio.h&gt;
#include&lt;string.h&gt;	//strlen
#include&lt;sys/socket.h&gt;
#include&lt;arpa/inet.h&gt;	//inet_addr

int main(int argc , char *argv[])
{
	int socket_desc;
	struct sockaddr_in server;
	char *message , server_reply[2000];
	
	//Create socket
	socket_desc = socket(AF_INET , SOCK_STREAM , 0);
	if (socket_desc == -1)
	{
		printf("Could not create socket");
	}
		
	server.sin_addr.s_addr = inet_addr("74.125.235.20");
	server.sin_family = AF_INET;
	server.sin_port = htons( 80 );

	//Connect to remote server
	if (connect(socket_desc , (struct sockaddr *)&amp;server , sizeof(server)) &lt; 0)
	{
		puts("connect error");
		return 1;
	}
	
	puts("Connected\n");
	
	//Send some data
	message = "GET / HTTP/1.1\r\n\r\n";
	if( send(socket_desc , message , strlen(message) , 0) &lt; 0)
	{
		puts("Send failed");
		return 1;
	}
	puts("Data Send\n");
	
	//Receive a reply from the server
	if( recv(socket_desc, server_reply , 2000 , 0) &lt; 0)
	{
		puts("recv failed");
	}
	puts("Reply received\n");
	puts(server_reply);
	
	return 0;
}</pre>
<p>Here is the output of the above code :</p>
<pre class="terminal">Connected
Data Send
Reply received
HTTP/1.1 302 Found
Location: http://www.google.co.in/
Cache-Control: private
Content-Type: text/html; charset=UTF-8
Set-Cookie: PREF=ID=0edd21a16f0db219:FF=0:TM=1324644706:LM=1324644706:S=z6hDC9cZfGEowv_o; expires=Sun, 22-Dec-2013 12:51:46 GMT; path=/; domain=.google.com
Date: Fri, 23 Dec 2011 12:51:46 GMT
Server: gws
Content-Length: 221
X-XSS-Protection: 1; mode=block
X-Frame-Options: SAMEORIGIN
&lt;HTML&gt;&lt;HEAD&gt;&lt;meta http-equiv="content-type" content="text/html;charset=utf-8"&gt;
&lt;TITLE&gt;302 Moved&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;
&lt;H1&gt;302 Moved&lt;/H1&gt;
The document has moved
&lt;A HREF="http://www.google.co.in/"&gt;here&lt;/A&gt;.
&lt;/BODY&gt;&lt;/HTML&gt;</pre>
<p>We can see what reply was send by the server. It looks something like Html, well IT IS html. Google.com replied with the content of the page we requested. Quite simple!</p>		<div class="display-ad-unit mobile-wide bsa" style="background:#fff3f3; height:315px;">

<!-- BinaryTides_S2S_InContent_ROS_Pos4 -->

<div id="bsa-zone_1672740659643-7_123456"></div>

</div>
<!-- Time : 7.1048736572266E-5, Pos : 11587 -->


<p><b>Note</b></p>
<p>When receiving data on a socket , we are basically reading the data on the socket. This is similar to reading data from a file. So we can also use the <code>read</code> function to read data on a socket. For example :</p>
<pre class="source-code">read(socket_desc, server_reply , 2000);</pre>
<p>Now that we have received our reply, its time to close the socket.</p>
<h3>5. Close socket</h3>
<p>Function <code>close</code> is used to close the socket. Need to include the unistd.h header file for this.</p>
<pre class="source-code">close(socket_desc);</pre>
<p>Thats it.</p>
<h3>6. Summary</h3>
<p>So in the above example we learned how to</p>
<pre class="highlight  ">1. Create a socket
2. Connect to remote server
3. Send some data
4. Receive a reply</pre>
<p>Your web browser also does the same thing when you open www.google.com<br>
This kind of socket activity represents a <b>socket client</b>. A client is an application that connects to a remote system to fetch or retrieve data.</p>
<p>The other kind of socket application is called a <b>socket server</b>. A server is a system that uses sockets to receive incoming connections and provide them with data. It is just the opposite of Client. So www.google.com is a server and your web browser is a client. Or more technically www.google.com is a HTTP Server and your web browser is an HTTP client.</p>
<p>Now its time to do some server tasks using sockets. But before we move ahead there are a few side topics that should be covered just incase you need them.</p>
<h3>Get ip address of hostname</h3>
<p>When connecting to a remote host , it is necessary to have its IP address. Function <code>gethostbyname</code> is used for this purpose. It takes the domain name as the parameter and returns a structure of type hostent. This structure has the ip information. It is present in <code>netdb.h</code>. Lets have a look at this structure </p>
<pre class="source-code">/* Description of data base entry for a single host.  */
struct hostent
{
  char *h_name;			/* Official name of host.  */
  char **h_aliases;		/* Alias list.  */
  int h_addrtype;		/* Host address type.  */
  int h_length;			/* Length of address.  */
  char **h_addr_list;		/* List of addresses from name server.  */
};</pre>
<p>The <code>h_addr_list</code> has the IP addresses. So now lets have some code to use them.</p>
<pre class="source-code">#include&lt;stdio.h&gt; //printf
#include&lt;string.h&gt; //strcpy
#include&lt;sys/socket.h&gt;
#include&lt;netdb.h&gt;	//hostent
#include&lt;arpa/inet.h&gt;

int main(int argc , char *argv[])
{
	char *hostname = "www.google.com";
	char ip[100];
	struct hostent *he;
	struct in_addr **addr_list;
	int i;
		
	if ( (he = gethostbyname( hostname ) ) == NULL) 
	{
		//gethostbyname failed
		herror("gethostbyname");
		return 1;
	}
	
	//Cast the h_addr_list to in_addr , since h_addr_list also has the ip address in long format only
	addr_list = (struct in_addr **) he-&gt;h_addr_list;
	
	for(i = 0; addr_list[i] != NULL; i++) 
	{
		//Return the first one;
		strcpy(ip , inet_ntoa(*addr_list[i]) );
	}
	
	printf("%s resolved to : %s" , hostname , ip);
	return 0;
}</pre>		<div class="display-ad-unit mobile-wide bsa" style="background:#fff3f3; height:315px;">

<!-- BinaryTides_S2S_InContent_ROS_Pos5 -->

<div id="bsa-zone_1672740746864-5_123456"></div>

</div>
<!-- Time : 0.00030303001403809, Pos : 15413 -->


<p>Output of the code would look like :</p>
<pre class="terminal">www.google.com resolved to : 74.125.235.20</pre>
<p>So the above code can be used to find the ip address of any domain name. Then the ip address can be used to make a connection using a socket.</p>
<p>Function <code>inet_ntoa</code> will convert an IP address in long format to dotted format. This is just the opposite of <code>inet_addr</code>.</p>
<p>So far we have see some important structures that are used. Lets revise them :</p>
<p>1. <code>sockaddr_in</code> - Connection information. Used by connect , send , recv etc.<br>
2. <code>in_addr</code> - Ip address in long format<br>
3. <code>sockaddr</code><br>
4. <code>hostent</code> - The ip addresses of a hostname. Used by gethostbyname</p>
<p>In the next part we shall look into creating servers using socket. Servers are the opposite of clients, that instead of connecting out to others, they wait for incoming connections.</p>
<h3>Socket server</h3>
<p>OK now onto server things. Socket servers operate in the following manner</p>
<pre class="highlight  ">1. Open a socket
2. Bind to a address(and port).
3. Listen for incoming connections.
4. Accept connections
5. Read/Send</pre>
<p>We have already learnt how to open a socket. So the next thing would be to bind it.</p>
<h3>1. Bind socket to a port</h3>
<p>The bind function can be used to bind a socket to a particular "address and port" combination. It needs a sockaddr_in structure similar to connect function.</p>
<pre class="source-code">int socket_desc;
struct sockaddr_in server;
	
//Create socket
socket_desc = socket(AF_INET , SOCK_STREAM , 0);
if (socket_desc == -1)
{
	printf("Could not create socket");
}
	
//Prepare the sockaddr_in structure
server.sin_family = AF_INET;
server.sin_addr.s_addr = INADDR_ANY;
server.sin_port = htons( 8888 );
	
//Bind
if( bind(socket_desc,(struct sockaddr *)&amp;server , sizeof(server)) &lt; 0)
{
	puts("bind failed");
}
puts("bind done");</pre>
<p>Now that bind is done, its time to make the socket listen to connections. We bind a socket to a particular IP address and a certain port number. By doing this we ensure that all incoming data which is directed towards this port number is received by this application. </p>
<p>This makes it obvious that you cannot have 2 sockets bound to the same port.</p>
<h3>2. Listen for incoming connections on the socket</h3>
<p>After binding a socket to a port the next thing we need to do is listen for connections. For this we need to put the socket in listening mode. Function <code>listen</code> is used to put the socket in listening mode. Just add the following line after bind.</p>
<pre class="source-code">//Listen
listen(socket_desc , 3);</pre>
<p>Thats all. Now comes the main part of accepting new connections.</p>
<h3>3. Accept connection</h3>
<p>Function <code>accept</code> is used for this. Here is the code</p>
<pre class="source-code">#include&lt;stdio.h&gt;
#include&lt;sys/socket.h&gt;
#include&lt;arpa/inet.h&gt;	//inet_addr

int main(int argc , char *argv[])
{
	int socket_desc , new_socket , c;
	struct sockaddr_in server , client;
	
	//Create socket
	socket_desc = socket(AF_INET , SOCK_STREAM , 0);
	if (socket_desc == -1)
	{
		printf("Could not create socket");
	}
	
	//Prepare the sockaddr_in structure
	server.sin_family = AF_INET;
	server.sin_addr.s_addr = INADDR_ANY;
	server.sin_port = htons( 8888 );
	
	//Bind
	if( bind(socket_desc,(struct sockaddr *)&amp;server , sizeof(server)) &lt; 0)
	{
		puts("bind failed");
	}
	puts("bind done");
	
	//Listen
	listen(socket_desc , 3);
	
	//Accept and incoming connection
	puts("Waiting for incoming connections...");
	c = sizeof(struct sockaddr_in);
	new_socket = accept(socket_desc, (struct sockaddr *)&amp;client, (socklen_t*)&amp;c);
	if (new_socket&lt;0)
	{
		perror("accept failed");
	}
	
	puts("Connection accepted");

	return 0;
}</pre>
<p><strong>Program output</strong></p>
<p>Run the program. It should show</p>
<pre class="terminal">bind done
Waiting for incoming connections...</pre>
<p>So now this program is waiting for incoming connections on port 8888. Dont close this program , keep it running.<br>
Now a client can connect to it on this port. We shall use the telnet client for testing this. Open a terminal and type </p>
<pre class="terminal">$ telnet localhost 8888</pre>
<p>On the terminal you shall get</p>
<pre class="terminal">Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
Connection closed by foreign host.</pre>
<p>And the server output will show</p>
<pre class="terminal">bind done
Waiting for incoming connections...
Connection accepted</pre>
<p>So we can see that the client connected to the server. Try the above process till you get it perfect.</p>
<p><b>4. Get the ip address of the connected client</b></p>
<p>You can get the ip address of client and the port of connection by using the sockaddr_in structure passed to accept function. It is very simple :</p>
<pre class="source-code">char *client_ip = inet_ntoa(client.sin_addr);
int client_port = ntohs(client.sin_port);</pre>
<p>We accepted an incoming connection but closed it immediately. This was not very productive. There are lots of things that can be done after an incoming connection is established. Afterall the connection was established for the purpose of communication. So lets reply to the client. </p>
<p>We can simply use the <code>write</code> function to write something to the socket of the incoming connection and the client should see it. Here is an example :</p>
<pre class="source-code">#include&lt;stdio.h&gt;
#include&lt;string.h&gt;	//strlen
#include&lt;sys/socket.h&gt;
#include&lt;arpa/inet.h&gt;	//inet_addr
#include&lt;unistd.h&gt;	//write

int main(int argc , char *argv[])
{
	int socket_desc , new_socket , c;
	struct sockaddr_in server , client;
	char *message;
	
	//Create socket
	socket_desc = socket(AF_INET , SOCK_STREAM , 0);
	if (socket_desc == -1)
	{
		printf("Could not create socket");
	}
	
	//Prepare the sockaddr_in structure
	server.sin_family = AF_INET;
	server.sin_addr.s_addr = INADDR_ANY;
	server.sin_port = htons( 8888 );
	
	//Bind
	if( bind(socket_desc,(struct sockaddr *)&amp;server , sizeof(server)) &lt; 0)
	{
		puts("bind failed");
		return 1;
	}
	puts("bind done");
	
	//Listen
	listen(socket_desc , 3);
	
	//Accept and incoming connection
	puts("Waiting for incoming connections...");
	c = sizeof(struct sockaddr_in);
	new_socket = accept(socket_desc, (struct sockaddr *)&amp;client, (socklen_t*)&amp;c);
	if (new_socket&lt;0)
	{
		perror("accept failed");
		return 1;
	}
	
	puts("Connection accepted");
	
	//Reply to the client
	message = "Hello Client , I have received your connection. But I have to go now, bye\n";
	write(new_socket , message , strlen(message));
	
	return 0;
}</pre>
<p>Run the above code in 1 terminal. And connect to this server using telnet from another terminal and you should see this :</p>
<pre class="terminal">$ telnet localhost 8888
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
Hello Client , I have received your connection. But I have to go now, bye
Connection closed by foreign host.</pre>
<p>So the client(telnet) received a reply from server.</p>
<p>We can see that the connection is closed immediately after that simply because the server program ends after accepting and sending reply. A server like www.google.com is always up to accept incoming connections. </p>
<p>It means that a server is supposed to be running all the time. Afterall its a server meant to serve. So we need to keep our server RUNNING non-stop. The simplest way to do this is to put the <code>accept</code> in a loop so that it can receive incoming connections all the time.</p>
<h3>5. Live Server</h3>
<p>So a live server will be alive for all time. Lets code this up :</p>
<pre class="source-code">#include&lt;stdio.h&gt;
#include&lt;string.h&gt;	//strlen
#include&lt;sys/socket.h&gt;
#include&lt;arpa/inet.h&gt;	//inet_addr
#include&lt;unistd.h&gt;	//write

int main(int argc , char *argv[])
{
	int socket_desc , new_socket , c;
	struct sockaddr_in server , client;
	char *message;
	
	//Create socket
	socket_desc = socket(AF_INET , SOCK_STREAM , 0);
	if (socket_desc == -1)
	{
		printf("Could not create socket");
	}
	
	//Prepare the sockaddr_in structure
	server.sin_family = AF_INET;
	server.sin_addr.s_addr = INADDR_ANY;
	server.sin_port = htons( 8888 );
	
	//Bind
	if( bind(socket_desc,(struct sockaddr *)&amp;server , sizeof(server)) &lt; 0)
	{
		puts("bind failed");
		return 1;
	}
	puts("bind done");
	
	//Listen
	listen(socket_desc , 3);
	
	//Accept and incoming connection
	puts("Waiting for incoming connections...");
	c = sizeof(struct sockaddr_in);
	while( (new_socket = accept(socket_desc, (struct sockaddr *)&amp;client, (socklen_t*)&amp;c)) )
	{
		puts("Connection accepted");
		
		//Reply to the client
		message = "Hello Client , I have received your connection. But I have to go now, bye\n";
		write(new_socket , message , strlen(message));
	}
	
	if (new_socket&lt;0)
	{
		perror("accept failed");
		return 1;
	}
	
	return 0;
}</pre>
<p>We havent done a lot there. Just the accept was put in a loop.</p>
<p>Now run the program in 1 terminal , and open 3 other terminals. From each of the 3 terminal do a telnet to the server port.</p>
<p>Each of the telnet terminal would show :</p>
<pre class="terminal">$ telnet localhost 8888
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
Hello Client , I have received your connection. But I have to go now, bye</pre>
<p>And the server terminal would show</p>
<pre class="terminal">bind done
Waiting for incoming connections...
Connection accepted
Connection accepted
Connection accepted</pre>
<p>So now the server is running nonstop and the telnet terminals are also connected nonstop. Now close the server program.<br>
All telnet terminals would show "Connection closed by foreign host."<br>
Good so far. But still there is not effective communication between the server and the client.</p>
<p>The server program accepts connections in a loop and just send them a reply, after that it does nothing with them. Also it is not able to handle more than 1 connection at a time. So now its time to handle the connections , and handle multiple connections together.</p>
<h3>6. Handle multiple socket connections with threads</h3>
<p>To handle every connection we need a separate handling code to run along with the main server accepting connections.<br>
One way to achieve this is using threads. The main server program accepts a connection and creates a new thread to handle communication for the connection, and then the server goes back to accept more connections.</p>
<p>On Linux threading can be done with the pthread (posix threads) library. It would be good to read some small tutorial about it if you dont know anything about it. However the usage is not very complicated.</p>
<p>We shall now use threads to create handlers for each connection the server accepts. Lets do it pal.</p>
<pre class="source-code">#include&lt;stdio.h&gt;
#include&lt;string.h&gt;	//strlen
#include&lt;stdlib.h&gt;	//strlen
#include&lt;sys/socket.h&gt;
#include&lt;arpa/inet.h&gt;	//inet_addr
#include&lt;unistd.h&gt;	//write

#include&lt;pthread.h&gt; //for threading , link with lpthread

void *connection_handler(void *);

int main(int argc , char *argv[])
{
	int socket_desc , new_socket , c , *new_sock;
	struct sockaddr_in server , client;
	char *message;
	
	//Create socket
	socket_desc = socket(AF_INET , SOCK_STREAM , 0);
	if (socket_desc == -1)
	{
		printf("Could not create socket");
	}
	
	//Prepare the sockaddr_in structure
	server.sin_family = AF_INET;
	server.sin_addr.s_addr = INADDR_ANY;
	server.sin_port = htons( 8888 );
	
	//Bind
	if( bind(socket_desc,(struct sockaddr *)&amp;server , sizeof(server)) &lt; 0)
	{
		puts("bind failed");
		return 1;
	}
	puts("bind done");
	
	//Listen
	listen(socket_desc , 3);
	
	//Accept and incoming connection
	puts("Waiting for incoming connections...");
	c = sizeof(struct sockaddr_in);
	while( (new_socket = accept(socket_desc, (struct sockaddr *)&amp;client, (socklen_t*)&amp;c)) )
	{
		puts("Connection accepted");
		
		//Reply to the client
		message = "Hello Client , I have received your connection. And now I will assign a handler for you\n";
		write(new_socket , message , strlen(message));
		
		pthread_t sniffer_thread;
		new_sock = malloc(1);
		*new_sock = new_socket;
		
		if( pthread_create( &amp;sniffer_thread , NULL ,  connection_handler , (void*) new_sock) &lt; 0)
		{
			perror("could not create thread");
			return 1;
		}
		
		//Now join the thread , so that we dont terminate before the thread
		//pthread_join( sniffer_thread , NULL);
		puts("Handler assigned");
	}
	
	if (new_socket&lt;0)
	{
		perror("accept failed");
		return 1;
	}
	
	return 0;
}

/*
 * This will handle connection for each client
 * */
void *connection_handler(void *socket_desc)
{
	//Get the socket descriptor
	int sock = *(int*)socket_desc;
	
	char *message;
	
	//Send some messages to the client
	message = "Greetings! I am your connection handler\n";
	write(sock , message , strlen(message));
	
	message = "Its my duty to communicate with you";
	write(sock , message , strlen(message));
	
	//Free the socket pointer
	free(socket_desc);
	
	return 0;
}</pre>
<p>Run the above server and open 3 terminals like before. Now the server will create a thread for each client connecting to it.</p>
<p>The telnet terminals would show :</p>
<pre class="terminal">$ telnet localhost 8888
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
Hello Client , I have received your connection. And now I will assign a handler for you
Hello I am your connection handler
Its my duty to communicate with you</pre>
<p>This one looks good , but the communication handler is also quite dumb. After the greeting it terminates. It should stay alive and keep communicating with the client.</p>
<p>One way to do this is by making the connection handler wait for some message from a client as long as the client is connected. If the client disconnects , the connection handler ends.</p>
<p>So the connection handler can be rewritten like this :</p>
<pre class="source-code">/*
 * This will handle connection for each client
 * */
void *connection_handler(void *socket_desc)
{
	//Get the socket descriptor
	int sock = *(int*)socket_desc;
	int read_size;
	char *message , client_message[2000];
	
	//Send some messages to the client
	message = "Greetings! I am your connection handler\n";
	write(sock , message , strlen(message));
	
	message = "Now type something and i shall repeat what you type \n";
	write(sock , message , strlen(message));
	
	//Receive a message from client
	while( (read_size = recv(sock , client_message , 2000 , 0)) &gt; 0 )
	{
		//Send the message back to client
		write(sock , client_message , strlen(client_message));
	}
	
	if(read_size == 0)
	{
		puts("Client disconnected");
		fflush(stdout);
	}
	else if(read_size == -1)
	{
		perror("recv failed");
	}
		
	//Free the socket pointer
	free(socket_desc);
	
	return 0;
}</pre>
<p>The above connection handler takes some input from the client and replies back with the same. Simple! Here is how the telnet output might look</p>
<pre class="terminal">$ telnet localhost 8888
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
Hello Client , I have received your connection. And now I will assign a handler for you
Greetings! I am your connection handler
Now type something and i shall repeat what you type
Hello
Hello
How are you
How are you
I am fine
I am fine</pre>
<p>So now we have a server thats communicative. Thats useful now.</p>
<p><b>Linking the pthread library</b></p>
<p>When compiling programs that use the pthread library you need to link the library. This is done like this :</p>
<pre class="terminal">$ gcc program.c -lpthread</pre>
<h3>Conclusion</h3>
<p>By now you must have learned the basics of <b>socket programming in C</b>. You can try out some experiments like writing a chat client or something similar.</p>
<p>If you think that the tutorial needs some addons or improvements or any of the code snippets above dont work then feel free to make a comment below so that it gets fixed.</p>
			</div>
	<!-- .entry-content -->
    
        <footer class="entry-meta">
		
		<span class="entry-categories">Category: <a href="https://www.binarytides.com/category/programming/sockets/c-sockets/" rel="category tag">C</a></span>
		<span class="entry-tags">Tags:  <a href="https://www.binarytides.com/tag/c-sockets-2/" rel="tag">c sockets</a>, <a href="https://www.binarytides.com/tag/network-programming/" rel="tag">network programming</a>, <a href="https://www.binarytides.com/tag/socket-programming/" rel="tag">socket programming</a></span> 
        
        <span>
                    </span>
		

        
		</footer><!-- .entry-meta -->
	
	            
            <div class="author-info">
                <div class="author-avatar">
                    <noscript><img alt='' src='https://secure.gravatar.com/avatar/e23f2767e6907e798da5b28694a2bf28?s=84&#038;r=g' srcset='https://secure.gravatar.com/avatar/e23f2767e6907e798da5b28694a2bf28?s=168&#038;r=g 2x' class='avatar avatar-84 photo' height='84' width='84' decoding='async'/></noscript><img alt="" src="data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%2084%2084%22%3E%3C/svg%3E" data-src="https://secure.gravatar.com/avatar/e23f2767e6907e798da5b28694a2bf28?s=84&amp;r=g" data-srcset="https://secure.gravatar.com/avatar/e23f2767e6907e798da5b28694a2bf28?s=168&amp;r=g 2x" class="lazyload avatar avatar-84 photo" height="84" width="84" decoding="async">                </div><!-- .author-avatar -->
                <div class="author-description">
                    
                    <span class="author-title">About Silver Moon</span>
                    
                    <p>A Tech Enthusiast, Blogger, Linux Fan and a Software Developer. Writes about Computer hardware, Linux and Open Source software and coding in Python, Php and Javascript.

He can be reached at <a href="mailto:binarytides@gmail.com">binarytides@gmail.com</a>.</p>
                    <div class="author-link">
                        <a href="https://www.binarytides.com/author/admin/" rel="author">
                            View all posts by Silver Moon <span class="meta-nav">→</span>                        </a>
                    </div><!-- .author-link	-->
                </div><!-- .author-description -->
            </div><!-- .author-info -->
			
	</article><!-- #post -->
        
                <nav class="nav-single clearfix">
            <div class="assistive-text">Post navigation</div>

            <span class="nav-previous">
									<a href="https://www.binarytides.com/gui-whois-client-in-python-with-wxpython/">
						<span class="post-thumbnail"></span>
						Python – How to Code a GUI Whois Client with Sockets and wxPython					</a>
							</span>
							<span class="nav-next">
											<a href="https://www.binarytides.com/multiple-socket-connections-fdset-select-linux/">
							<span class="post-thumbnail"></span>
							Handle multiple socket connections with fd_set and select on Linux						</a>
														</span>
			        </nav>
        <!-- .nav-single -->
        
        
<div id="comments" class="comments-area">

	
			<h3 class="comments-title comment-area-title">
			152 Comments		</h3>
        
		<span class="post-title">Socket programming in C on Linux – The Ultimate Guide for Beginners</span>	
        <!-- commentlist -->
		<ol class="commentlist comment-list">
				
	<li class="comment even thread-even depth-1" id="li-comment-325601">
		
		<article id="comment-325601" class="comment">
			
			<header class="comment-header comment-author vcard">
				<noscript><img alt='' src='https://secure.gravatar.com/avatar/e4b049f0577ea852b9e6f2174db8d38c?s=64&#038;r=g' srcset='https://secure.gravatar.com/avatar/e4b049f0577ea852b9e6f2174db8d38c?s=128&#038;r=g 2x' class='avatar avatar-64 photo' height='64' width='64' decoding='async'/></noscript><img alt="" src="data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%2064%2064%22%3E%3C/svg%3E" data-src="https://secure.gravatar.com/avatar/e4b049f0577ea852b9e6f2174db8d38c?s=64&amp;r=g" data-srcset="https://secure.gravatar.com/avatar/e4b049f0577ea852b9e6f2174db8d38c?s=128&amp;r=g 2x" class="lazyload avatar avatar-64 photo" height="64" width="64" decoding="async"><cite class="fn" itemprop="name">Steve </cite><p class="comment-meta"><a href="https://www.binarytides.com/socket-programming-c-linux-tutorial/comment-page-3/#comment-325601"><time datetime="2021-10-10T16:28:30+05:30">October 10, 2021 at 4:04 pm</time></a></p>			</header><!-- .comment-meta -->

			
			<section class="comment-content comment">
				<p>Thank you so much. Very well explained and so helpful. Congratulations!</p>
							</section><!-- .comment-content -->

			<div class="reply">
				<a rel="nofollow" class="comment-reply-link" href="https://www.binarytides.com/socket-programming-c-linux-tutorial/#comment-325601" data-commentid="325601" data-postid="1271" data-belowelement="comment-325601" data-respondelement="respond" data-replyto="Reply to Steve" aria-label="Reply to Steve">Reply</a>			</div>
			<!-- .reply -->
		
		</article>
		<!-- #comment-## -->
	</li><!-- #comment-## -->
	
	<li class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-320722">
		
		<article id="comment-320722" class="comment">
			
			<header class="comment-header comment-author vcard">
				<noscript><img alt='' src='https://secure.gravatar.com/avatar/07f2c1a43e916213a87dc15253b162fe?s=64&#038;r=g' srcset='https://secure.gravatar.com/avatar/07f2c1a43e916213a87dc15253b162fe?s=128&#038;r=g 2x' class='avatar avatar-64 photo' height='64' width='64' decoding='async'/></noscript><img alt="" src="data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%2064%2064%22%3E%3C/svg%3E" data-src="https://secure.gravatar.com/avatar/07f2c1a43e916213a87dc15253b162fe?s=64&amp;r=g" data-srcset="https://secure.gravatar.com/avatar/07f2c1a43e916213a87dc15253b162fe?s=128&amp;r=g 2x" class="lazyload avatar avatar-64 photo" height="64" width="64" decoding="async"><cite class="fn" itemprop="name">red </cite><p class="comment-meta"><a href="https://www.binarytides.com/socket-programming-c-linux-tutorial/comment-page-3/#comment-320722"><time datetime="2021-07-13T20:25:56+05:30">July 13, 2021 at 8:08 pm</time></a></p>			</header><!-- .comment-meta -->

			
			<section class="comment-content comment">
				<p>thank you soo much , helpful and perfect explanation</p>
							</section><!-- .comment-content -->

			<div class="reply">
				<a rel="nofollow" class="comment-reply-link" href="https://www.binarytides.com/socket-programming-c-linux-tutorial/#comment-320722" data-commentid="320722" data-postid="1271" data-belowelement="comment-320722" data-respondelement="respond" data-replyto="Reply to red" aria-label="Reply to red">Reply</a>			</div>
			<!-- .reply -->
		
		</article>
		<!-- #comment-## -->
	</li><!-- #comment-## -->
	
	<li class="comment even thread-even depth-1" id="li-comment-320434">
		
		<article id="comment-320434" class="comment">
			
			<header class="comment-header comment-author vcard">
				<noscript><img alt='' src='https://secure.gravatar.com/avatar/702b5531a249ef966b60d4a2c7b38e37?s=64&#038;r=g' srcset='https://secure.gravatar.com/avatar/702b5531a249ef966b60d4a2c7b38e37?s=128&#038;r=g 2x' class='avatar avatar-64 photo' height='64' width='64' decoding='async'/></noscript><img alt="" src="data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%2064%2064%22%3E%3C/svg%3E" data-src="https://secure.gravatar.com/avatar/702b5531a249ef966b60d4a2c7b38e37?s=64&amp;r=g" data-srcset="https://secure.gravatar.com/avatar/702b5531a249ef966b60d4a2c7b38e37?s=128&amp;r=g 2x" class="lazyload avatar avatar-64 photo" height="64" width="64" decoding="async"><cite class="fn" itemprop="name">Oin-oin </cite><p class="comment-meta"><a href="https://www.binarytides.com/socket-programming-c-linux-tutorial/comment-page-3/#comment-320434"><time datetime="2021-07-05T20:13:01+05:30">July 5, 2021 at 8:08 pm</time></a></p>			</header><!-- .comment-meta -->

			
			<section class="comment-content comment">
				<p>You never mention CLOSING the socket.  Let’s suppose we have clients contacting a server to receive a file of arbitrary length.  So the client now has to read the response from the server until the server reaches the end-of-file EOF.  Can the server simply close the socket when it has finished ?  Or will the client receive a “Socket reset by peer” ?</p>
							</section><!-- .comment-content -->

			<div class="reply">
				<a rel="nofollow" class="comment-reply-link" href="https://www.binarytides.com/socket-programming-c-linux-tutorial/#comment-320434" data-commentid="320434" data-postid="1271" data-belowelement="comment-320434" data-respondelement="respond" data-replyto="Reply to Oin-oin" aria-label="Reply to Oin-oin">Reply</a>			</div>
			<!-- .reply -->
		
		</article>
		<!-- #comment-## -->
	</li><!-- #comment-## -->
	
	<li class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-319308">
		
		<article id="comment-319308" class="comment">
			
			<header class="comment-header comment-author vcard">
				<noscript><img alt='' src='https://secure.gravatar.com/avatar/70b03db954aa45fc2559e85f5d5bd13e?s=64&#038;r=g' srcset='https://secure.gravatar.com/avatar/70b03db954aa45fc2559e85f5d5bd13e?s=128&#038;r=g 2x' class='avatar avatar-64 photo' height='64' width='64' decoding='async'/></noscript><img alt="" src="data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%2064%2064%22%3E%3C/svg%3E" data-src="https://secure.gravatar.com/avatar/70b03db954aa45fc2559e85f5d5bd13e?s=64&amp;r=g" data-srcset="https://secure.gravatar.com/avatar/70b03db954aa45fc2559e85f5d5bd13e?s=128&amp;r=g 2x" class="lazyload avatar avatar-64 photo" height="64" width="64" decoding="async"><cite class="fn" itemprop="name">Nico </cite><p class="comment-meta"><a href="https://www.binarytides.com/socket-programming-c-linux-tutorial/comment-page-3/#comment-319308"><time datetime="2021-06-12T03:56:29+05:30">June 12, 2021 at 3:03 am</time></a></p>			</header><!-- .comment-meta -->

			
			<section class="comment-content comment">
				<p>Thank you! Exactly what I was looking for in a post about the basics of sockets in C.</p>
							</section><!-- .comment-content -->

			<div class="reply">
				<a rel="nofollow" class="comment-reply-link" href="https://www.binarytides.com/socket-programming-c-linux-tutorial/#comment-319308" data-commentid="319308" data-postid="1271" data-belowelement="comment-319308" data-respondelement="respond" data-replyto="Reply to Nico" aria-label="Reply to Nico">Reply</a>			</div>
			<!-- .reply -->
		
		</article>
		<!-- #comment-## -->
	</li><!-- #comment-## -->
	
	<li class="comment even thread-even depth-1" id="li-comment-318833">
		
		<article id="comment-318833" class="comment">
			
			<header class="comment-header comment-author vcard">
				<noscript><img alt='' src='https://secure.gravatar.com/avatar/8167e353b097191927d0bc131174cc32?s=64&#038;r=g' srcset='https://secure.gravatar.com/avatar/8167e353b097191927d0bc131174cc32?s=128&#038;r=g 2x' class='avatar avatar-64 photo' height='64' width='64' decoding='async'/></noscript><img alt="" src="data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%2064%2064%22%3E%3C/svg%3E" data-src="https://secure.gravatar.com/avatar/8167e353b097191927d0bc131174cc32?s=64&amp;r=g" data-srcset="https://secure.gravatar.com/avatar/8167e353b097191927d0bc131174cc32?s=128&amp;r=g 2x" class="lazyload avatar avatar-64 photo" height="64" width="64" decoding="async"><cite class="fn" itemprop="name">Manu </cite><p class="comment-meta"><a href="https://www.binarytides.com/socket-programming-c-linux-tutorial/comment-page-3/#comment-318833"><time datetime="2021-06-01T11:56:43+05:30">June 1, 2021 at 11:11 am</time></a></p>			</header><!-- .comment-meta -->

			
			<section class="comment-content comment">
				<p>Brilliantly written and explained.</p>
							</section><!-- .comment-content -->

			<div class="reply">
				<a rel="nofollow" class="comment-reply-link" href="https://www.binarytides.com/socket-programming-c-linux-tutorial/#comment-318833" data-commentid="318833" data-postid="1271" data-belowelement="comment-318833" data-respondelement="respond" data-replyto="Reply to Manu" aria-label="Reply to Manu">Reply</a>			</div>
			<!-- .reply -->
		
		</article>
		<!-- #comment-## -->
	</li><!-- #comment-## -->
	
	<li class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-317925">
		
		<article id="comment-317925" class="comment">
			
			<header class="comment-header comment-author vcard">
				<noscript><img alt='' src='https://secure.gravatar.com/avatar/a2ed87ba8eca5d565208aecfce289425?s=64&#038;r=g' srcset='https://secure.gravatar.com/avatar/a2ed87ba8eca5d565208aecfce289425?s=128&#038;r=g 2x' class='avatar avatar-64 photo' height='64' width='64' decoding='async'/></noscript><img alt="" src="data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%2064%2064%22%3E%3C/svg%3E" data-src="https://secure.gravatar.com/avatar/a2ed87ba8eca5d565208aecfce289425?s=64&amp;r=g" data-srcset="https://secure.gravatar.com/avatar/a2ed87ba8eca5d565208aecfce289425?s=128&amp;r=g 2x" class="lazyload avatar avatar-64 photo" height="64" width="64" decoding="async"><cite class="fn" itemprop="name">Constantin </cite><p class="comment-meta"><a href="https://www.binarytides.com/socket-programming-c-linux-tutorial/comment-page-3/#comment-317925"><time datetime="2021-05-19T12:59:44+05:30">May 19, 2021 at 12:12 pm</time></a></p>			</header><!-- .comment-meta -->

			
			<section class="comment-content comment">
				<p>The tutorial is very well written and it teaches the main concept of the Linux sockets and the examples are useful, thanks for your work.</p>
							</section><!-- .comment-content -->

			<div class="reply">
				<a rel="nofollow" class="comment-reply-link" href="https://www.binarytides.com/socket-programming-c-linux-tutorial/#comment-317925" data-commentid="317925" data-postid="1271" data-belowelement="comment-317925" data-respondelement="respond" data-replyto="Reply to Constantin" aria-label="Reply to Constantin">Reply</a>			</div>
			<!-- .reply -->
		
		</article>
		<!-- #comment-## -->
	</li><!-- #comment-## -->
	
	<li class="comment even thread-even depth-1" id="li-comment-314255">
		
		<article id="comment-314255" class="comment">
			
			<header class="comment-header comment-author vcard">
				<noscript><img alt='' src='https://secure.gravatar.com/avatar/ebd490becca58acdbb8376f7494ee4f4?s=64&#038;r=g' srcset='https://secure.gravatar.com/avatar/ebd490becca58acdbb8376f7494ee4f4?s=128&#038;r=g 2x' class='avatar avatar-64 photo' height='64' width='64' decoding='async'/></noscript><img alt="" src="data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%2064%2064%22%3E%3C/svg%3E" data-src="https://secure.gravatar.com/avatar/ebd490becca58acdbb8376f7494ee4f4?s=64&amp;r=g" data-srcset="https://secure.gravatar.com/avatar/ebd490becca58acdbb8376f7494ee4f4?s=128&amp;r=g 2x" class="lazyload avatar avatar-64 photo" height="64" width="64" decoding="async"><cite class="fn" itemprop="name"><a href="http://waltermilner.com/" rel="external nofollow ugc" class="url">Walter Milner</a> </cite><p class="comment-meta"><a href="https://www.binarytides.com/socket-programming-c-linux-tutorial/comment-page-3/#comment-314255"><time datetime="2021-03-01T19:35:59+05:30">March 1, 2021 at 7:07 pm</time></a></p>			</header><!-- .comment-meta -->

			
			<section class="comment-content comment">
				<p>Your http read code usually gets a ‘bad request’ response.<br>
This is because http 1.1 requires a host = in the header. Something like<br>
 char * message = “GET / HTTP/1.1\r\nHost: example.com\r\n\r\n”;<br>
	if( send(socketID , message , strlen(message) , 0) &lt; 0)</p>
							</section><!-- .comment-content -->

			<div class="reply">
				<a rel="nofollow" class="comment-reply-link" href="https://www.binarytides.com/socket-programming-c-linux-tutorial/#comment-314255" data-commentid="314255" data-postid="1271" data-belowelement="comment-314255" data-respondelement="respond" data-replyto="Reply to Walter Milner" aria-label="Reply to Walter Milner">Reply</a>			</div>
			<!-- .reply -->
		
		</article>
		<!-- #comment-## -->
	</li><!-- #comment-## -->
	
	<li class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-313611">
		
		<article id="comment-313611" class="comment">
			
			<header class="comment-header comment-author vcard">
				<noscript><img alt='' src='https://secure.gravatar.com/avatar/89164a46cafd8d93791d5d7e95862db8?s=64&#038;r=g' srcset='https://secure.gravatar.com/avatar/89164a46cafd8d93791d5d7e95862db8?s=128&#038;r=g 2x' class='avatar avatar-64 photo' height='64' width='64' decoding='async'/></noscript><img alt="" src="data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%2064%2064%22%3E%3C/svg%3E" data-src="https://secure.gravatar.com/avatar/89164a46cafd8d93791d5d7e95862db8?s=64&amp;r=g" data-srcset="https://secure.gravatar.com/avatar/89164a46cafd8d93791d5d7e95862db8?s=128&amp;r=g 2x" class="lazyload avatar avatar-64 photo" height="64" width="64" decoding="async"><cite class="fn" itemprop="name"><a href="http://www.albertiswindow.com/" rel="external nofollow ugc" class="url">Paul Antonucci</a> </cite><p class="comment-meta"><a href="https://www.binarytides.com/socket-programming-c-linux-tutorial/comment-page-3/#comment-313611"><time datetime="2021-02-16T23:29:09+05:30">February 16, 2021 at 11:11 pm</time></a></p>			</header><!-- .comment-meta -->

			
			<section class="comment-content comment">
				<p>Thanks for this tutorial.<br>
Is the second like below supposed to be commented out?</p>
<p>		//Now join the thread , so that we dont terminate before the thread<br>
		//pthread_join( sniffer_thread , NULL);<br>
		puts(“Handler assigned”);</p>
							</section><!-- .comment-content -->

			<div class="reply">
				<a rel="nofollow" class="comment-reply-link" href="https://www.binarytides.com/socket-programming-c-linux-tutorial/#comment-313611" data-commentid="313611" data-postid="1271" data-belowelement="comment-313611" data-respondelement="respond" data-replyto="Reply to Paul Antonucci" aria-label="Reply to Paul Antonucci">Reply</a>			</div>
			<!-- .reply -->
		
		</article>
		<!-- #comment-## -->
	</li><!-- #comment-## -->
	
	<li class="comment even thread-even depth-1" id="li-comment-307791">
		
		<article id="comment-307791" class="comment">
			
			<header class="comment-header comment-author vcard">
				<noscript><img alt='' src='https://secure.gravatar.com/avatar/f1f64ca6eac90d1abe34fd94738b9b83?s=64&#038;r=g' srcset='https://secure.gravatar.com/avatar/f1f64ca6eac90d1abe34fd94738b9b83?s=128&#038;r=g 2x' class='avatar avatar-64 photo' height='64' width='64' decoding='async'/></noscript><img alt="" src="data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%2064%2064%22%3E%3C/svg%3E" data-src="https://secure.gravatar.com/avatar/f1f64ca6eac90d1abe34fd94738b9b83?s=64&amp;r=g" data-srcset="https://secure.gravatar.com/avatar/f1f64ca6eac90d1abe34fd94738b9b83?s=128&amp;r=g 2x" class="lazyload avatar avatar-64 photo" height="64" width="64" decoding="async"><cite class="fn" itemprop="name">Prathibha </cite><p class="comment-meta"><a href="https://www.binarytides.com/socket-programming-c-linux-tutorial/comment-page-3/#comment-307791"><time datetime="2021-01-12T12:49:30+05:30">January 12, 2021 at 12:12 pm</time></a></p>			</header><!-- .comment-meta -->

			
			<section class="comment-content comment">
				<p>Explanation is good. Concepts are made very clear with detailed explanation and example.</p>
							</section><!-- .comment-content -->

			<div class="reply">
				<a rel="nofollow" class="comment-reply-link" href="https://www.binarytides.com/socket-programming-c-linux-tutorial/#comment-307791" data-commentid="307791" data-postid="1271" data-belowelement="comment-307791" data-respondelement="respond" data-replyto="Reply to Prathibha" aria-label="Reply to Prathibha">Reply</a>			</div>
			<!-- .reply -->
		
		</article>
		<!-- #comment-## -->
	</li><!-- #comment-## -->
	
	<li class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-306235">
		
		<article id="comment-306235" class="comment">
			
			<header class="comment-header comment-author vcard">
				<noscript><img alt='' src='https://secure.gravatar.com/avatar/2a973dcaa929f13519e269a11b28a17a?s=64&#038;r=g' srcset='https://secure.gravatar.com/avatar/2a973dcaa929f13519e269a11b28a17a?s=128&#038;r=g 2x' class='avatar avatar-64 photo' height='64' width='64' decoding='async'/></noscript><img alt="" src="data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%2064%2064%22%3E%3C/svg%3E" data-src="https://secure.gravatar.com/avatar/2a973dcaa929f13519e269a11b28a17a?s=64&amp;r=g" data-srcset="https://secure.gravatar.com/avatar/2a973dcaa929f13519e269a11b28a17a?s=128&amp;r=g 2x" class="lazyload avatar avatar-64 photo" height="64" width="64" decoding="async"><cite class="fn" itemprop="name">Mike </cite><p class="comment-meta"><a href="https://www.binarytides.com/socket-programming-c-linux-tutorial/comment-page-3/#comment-306235"><time datetime="2021-01-06T13:30:26+05:30">January 6, 2021 at 1:01 pm</time></a></p>			</header><!-- .comment-meta -->

			
			<section class="comment-content comment">
				<p>Very nice and helpful tutorial , thank you a lot for sharing<br>
I would like to make a question in you example. I would like to send two variables from client to server (a) &amp; (b) and to make the sumution of those to server and after that the server to reply the result to client.<br>
which change can i make to your example , can you help me?</p>
<p>Thank you a lot</p>
							</section><!-- .comment-content -->

			<div class="reply">
				<a rel="nofollow" class="comment-reply-link" href="https://www.binarytides.com/socket-programming-c-linux-tutorial/#comment-306235" data-commentid="306235" data-postid="1271" data-belowelement="comment-306235" data-respondelement="respond" data-replyto="Reply to Mike" aria-label="Reply to Mike">Reply</a>			</div>
			<!-- .reply -->
		
		</article>
		<!-- #comment-## -->
	<ol class="children">
	
	<li class="comment even depth-2" id="li-comment-319061">
		
		<article id="comment-319061" class="comment">
			
			<header class="comment-header comment-author vcard">
				<noscript><img alt='' src='https://secure.gravatar.com/avatar/408dd80f33b49963cd0c502b142ee11a?s=64&#038;r=g' srcset='https://secure.gravatar.com/avatar/408dd80f33b49963cd0c502b142ee11a?s=128&#038;r=g 2x' class='avatar avatar-64 photo' height='64' width='64' decoding='async'/></noscript><img alt="" src="data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%2064%2064%22%3E%3C/svg%3E" data-src="https://secure.gravatar.com/avatar/408dd80f33b49963cd0c502b142ee11a?s=64&amp;r=g" data-srcset="https://secure.gravatar.com/avatar/408dd80f33b49963cd0c502b142ee11a?s=128&amp;r=g 2x" class="lazyload avatar avatar-64 photo" height="64" width="64" decoding="async"><cite class="fn" itemprop="name">salil </cite><p class="comment-meta"><a href="https://www.binarytides.com/socket-programming-c-linux-tutorial/comment-page-3/#comment-319061"><time datetime="2021-06-06T23:40:02+05:30">June 6, 2021 at 11:11 pm</time></a></p>			</header><!-- .comment-meta -->

			
			<section class="comment-content comment">
				<p>Can you send me the code client</p>
							</section><!-- .comment-content -->

			<div class="reply">
				<a rel="nofollow" class="comment-reply-link" href="https://www.binarytides.com/socket-programming-c-linux-tutorial/#comment-319061" data-commentid="319061" data-postid="1271" data-belowelement="comment-319061" data-respondelement="respond" data-replyto="Reply to salil" aria-label="Reply to salil">Reply</a>			</div>
			<!-- .reply -->
		
		</article>
		<!-- #comment-## -->
	</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol>
		<!-- /.commentlist -->

				<nav id="comment-nav-below" class="navigation" role="navigation">
			<h1 class="assistive-text section-heading">Comment navigation</h1>
			<div class="nav-previous"><a href="https://www.binarytides.com/socket-programming-c-linux-tutorial/comment-page-2/#comments">← Older Comments</a></div>
			<div class="nav-next"></div>
		</nav>
		
		
	
		<div id="respond" class="comment-respond">
		<h3 id="reply-title" class="comment-reply-title">Leave a Reply <small><a rel="nofollow" id="cancel-comment-reply-link" href="https://www.binarytides.com/socket-programming-c-linux-tutorial/#respond" style="display:none;">Cancel reply</a></small></h3><form action="https://www.binarytides.com/blog/wp-comments-post.php" method="post" id="commentform" class="comment-form"><p class="comment-notes"><span id="email-notes">Your email address will not be published.</span> <span class="required-field-message">Required fields are marked <span class="required">*</span></span></p><p class="comment-form-comment"><label for="comment">Comment <span class="required">*</span></label> <textarea id="comment" name="comment" cols="45" rows="8" maxlength="65525" required="required"></textarea></p><p class="comment-form-author"><label for="author">Name <span class="required">*</span></label> <input id="author" name="author" type="text" value="" size="30" maxlength="245" autocomplete="name" required="required"></p>
<p class="comment-form-email"><label for="email">Email <span class="required">*</span></label> <input id="email" name="email" type="text" value="" size="30" maxlength="100" aria-describedby="email-notes" autocomplete="email" required="required"></p>
<p class="comment-form-url"><label for="url">Website</label> <input id="url" name="url" type="text" value="" size="30" maxlength="200" autocomplete="url"></p>
<p class="form-submit"><input name="submit" type="submit" id="submit" class="submit" value="Post Comment"> <input type="hidden" name="comment_post_ID" value="1271" id="comment_post_ID">
<input type="hidden" name="comment_parent" id="comment_parent" value="0">
</p><p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="fe3a64777c"></p><p style="display: none !important;"><label>Δ<textarea name="ak_hp_textarea" cols="45" rows="8" maxlength="100"></textarea></label><input type="hidden" id="ak_js_1" name="ak_js" value="1678945820029"><script>document.getElementById( "ak_js_1" ).setAttribute( "value", ( new Date() ).getTime() );</script></p></form>	</div><!-- #respond -->
	
</div><!-- #comments .comments-area -->

        
    </div>
    <!-- #content -->
</main>
<!-- #primary -->



    <aside id="secondary" class="widget-area sidebar sidebar-primary" itemscope="" itemtype="http://schema.org/WPSideBar">
        <div class="display-ad-unit mobile-wide widget" style="margin-top:0; background:#fff3f3; height:315px;">
<!-- BinaryTides_S2S_Sidebar_ROS_Pos1 -->
<div id="bsa-zone_1610660972735-6_123456"></div>

</div><section id="search-2" class="widget widget_search"><h3 class="title">Search</h3><form role="search" method="get" id="searchform" class="searchform" action="https://www.binarytides.com/">
				<div>
					<label class="screen-reader-text" for="s">Search for:</label>
					<input type="text" value="" name="s" id="s">
					<input type="submit" id="searchsubmit" value="Search">
				</div>
			</form></section><div class="display-ad-unit mobile-wide widget" style="margin-top:0; background:#fff3f3; height:315px;">

<!-- BinaryTides_S2S_Sidebar_ROS_Pos2 -->
<div id="bsa-zone_1617290824926-6_123456"></div>

</div><section id="widget_crp-3" class="widget widget_widget_crp"><h3 class="title">Related Posts</h3><div class="crp_related crp_related_widget    "><ul><li><a href="https://www.binarytides.com/linux-fstab-file-structure-explained/" class="crp_link post-14626"><figure></figure><span class="crp_title">Linux /etc/fstab File Structure Explained - Beginners Guide</span></a><span class="crp_primary_term"> Linux</span> </li><li><a href="https://www.binarytides.com/raw-socket-programming-in-python-linux/" class="crp_link post-3119"><figure></figure><span class="crp_title">Raw Socket Programming in Python on Linux - Code Examples</span></a><span class="crp_primary_term"> Socket Programming</span> </li><li><a href="https://www.binarytides.com/simulate-circuits-with-ngspice-on-ubuntu/" class="crp_link post-14218"><figure></figure><span class="crp_title">How to simulate circuits with Ngspice on Ubuntu - Guide for Beginners</span></a><span class="crp_primary_term"> General</span> </li><li><a href="https://www.binarytides.com/raw-sockets-using-winsock/" class="crp_link post-5"><figure></figure><span class="crp_title">Raw socket programming on windows with winsock</span></a><span class="crp_primary_term"> Winsock</span> </li><li><a href="https://www.binarytides.com/raw-sockets-packets-with-winpcap/" class="crp_link post-20"><figure></figure><span class="crp_title">Raw socket programming on windows with Winpcap</span></a><span class="crp_primary_term"> Winsock</span> </li><li><a href="https://www.binarytides.com/winsock-socket-programming-tutorial/" class="crp_link post-1304"><figure></figure><span class="crp_title">Winsock tutorial - Socket programming in C on windows</span></a><span class="crp_primary_term"> Winsock</span> </li></ul><div class="crp_clear"></div></div></section><section id="block-2" class="widget widget_block">
<div class="is-layout-constrained wp-block-group zoom-social-icons-widget zoom-social-icons-legacy-widget-group"><div class="wp-block-group__inner-container">
<h3 class="zoom-social-icons-legacy-widget-title widget-title title heading-size-3">Follow us</h3>



<div class="wp-block-wpzoom-blocks-social-icons is-style-with-canvas-round" style="--wpz-social-icons-block-item-font-size:24px;--wpz-social-icons-block-item-padding-horizontal:8px;--wpz-social-icons-block-item-padding-vertical:8px;--wpz-social-icons-block-item-margin-horizontal:5px;--wpz-social-icons-block-item-margin-vertical:5px;--wpz-social-icons-block-item-border-radius:0px;--wpz-social-icons-block-label-font-size:20px;--wpz-social-icons-block-label-color:inherit;--wpz-social-icons-block-label-color-hover:inherit"><a href="https://www.facebook.com/binarytides" class="social-icon-link" title="Facebook" target="_blank" style="--wpz-social-icons-block-item-color:#3b5998;--wpz-social-icons-block-item-color-hover:#3b5998"><span class="social-icon socicon socicon-facebook"></span></a><a href="https://twitter.com/binarytides" class="social-icon-link" title="Twitter" target="_blank" style="--wpz-social-icons-block-item-color:#1da1f2;--wpz-social-icons-block-item-color-hover:#1da1f2"><span class="social-icon socicon socicon-twitter"></span></a><a href="https://www.pinterest.com/binarytides/" class="social-icon-link" title="Pinterest" target="_blank" style="--wpz-social-icons-block-item-color:#c92619;--wpz-social-icons-block-item-color-hover:#c92619"><span class="social-icon socicon socicon-pinterest"></span></a></div>
</div></div>
</section><div class="display-ad-unit mobile-wide widget" style="margin-top:0; background:#fff3f3; height:315px;">

<!-- BinaryTides_S2S_Sidebar_ROS_Pos3 -->

<div id="bsa-zone_1672740811253-2_123456"></div>

</div>    </aside>
    


    


</div>
<!-- box -->
</div>
<!-- wrap -->


</div>
<!-- #main .wrapper .site-inner -->

<!-- Footer Widgets area  -->
<div class="footer-widgets">
    <div class="wrap">
    <div class="box-wrap">
            
<div class="sidebar-footer">
    
    <div class="footer-widgets-1 widget-area">
    <section id="block-5" class="widget widget_block container-fluid">
<div class="is-layout-constrained wp-block-group"><div class="wp-block-group__inner-container">
<h3>About</h3>



<p>Binarytides is a tech website where we publish high quality tutorials and guides on variety of topics including coding, linux/open source and computer hardware. We review the best software and pc hardware to help our readers find the best solution for their needs</p>
</div></div>
</section>    </div>

    <div class="footer-widgets-2 widget-area">
    <section id="nav_menu-2" class="widget widget_nav_menu container-fluid"><h3>Computer Hardware</h3><div class="menu-footer-tech-menu-container"><ul id="menu-footer-tech-menu" class="menu"><li id="menu-item-10741" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-10741"><a href="https://www.binarytides.com/category/tech/headphones/">Headphones</a></li>
<li id="menu-item-10742" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-10742"><a href="https://www.binarytides.com/category/tech/laptops/">Laptops</a></li>
<li id="menu-item-10743" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-10743"><a href="https://www.binarytides.com/category/tech/monitors/">Monitors</a></li>
<li id="menu-item-10744" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-10744"><a href="https://www.binarytides.com/category/tech/mouse/">Mouse</a></li>
<li id="menu-item-10745" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-10745"><a href="https://www.binarytides.com/category/tech/printers/">Printers</a></li>
<li id="menu-item-10746" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-10746"><a href="https://www.binarytides.com/category/tech/tablets/">Tablets</a></li>
<li id="menu-item-10753" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-10753"><a href="https://www.binarytides.com/category/tech/keyboards/">Keyboards</a></li>
<li id="menu-item-10754" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-10754"><a href="https://www.binarytides.com/category/tech/motherboards/">Motherboards</a></li>
<li id="menu-item-12333" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-12333"><a href="https://www.binarytides.com/category/tech/pc-cases/">PC Cases</a></li>
<li id="menu-item-12334" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-12334"><a href="https://www.binarytides.com/category/tech/routers/">Routers</a></li>
<li id="menu-item-12335" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-12335"><a href="https://www.binarytides.com/category/tech/gaming-pcs/">Gaming PCs</a></li>
<li id="menu-item-12639" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-12639"><a href="https://www.binarytides.com/category/tech/psus/">PSUs</a></li>
<li id="menu-item-12640" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-12640"><a href="https://www.binarytides.com/category/tech/cpu-coolers/">CPU Coolers</a></li>
</ul></div></section>    </div>

    <div class="footer-widgets-3 widget-area">
        </div>

</div>
    </div>
    </div>
</div>


<!-- Footer Wide Widgets -->
<div class="sidebar-footer-wide">
    <div class="wrap">
    <div class="box-wrap">
            <div class="footer-wide-widgets widget-area">
<section id="text-18" class="widget widget_text container-fluid">			<div class="textwidget"><p><span style="font-size:0.9em;">This site, binarytides.com is a participant in the Amazon Services LLC Associates Program, an affiliate advertising program designed to provide a means for sites to earn advertising fees by advertising and linking to Amazon.com.</span></p>
</div>
		</section></div>


    </div>
    </div>
</div>


<!-- Footer Menu  -->
<div class="footer-menu">    
    <div class="wrap">
    <div class="box-wrap">
        <ul id="menu-footer" class="menu"><li id="menu-item-10757" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-10757"><a href="https://www.binarytides.com/">Home</a></li>
<li id="menu-item-8164" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-8164"><a href="https://www.binarytides.com/about/">About us</a></li>
<li id="menu-item-8165" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-8165"><a href="https://www.binarytides.com/contact/">Contact us</a></li>
<li id="menu-item-8166" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-8166"><a href="https://www.binarytides.com/privacy/">Privacy Policy</a></li>
<li id="menu-item-8167" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-8167"><a href="https://www.binarytides.com/terms/">Terms of Service</a></li>
</ul>    </div>
    </div>
</div>




<!-- Final footer  -->
<footer class="site-footer">
    <div class="wrap">
    <div class="box-wrap">
        <p>Copyright © 2023 · BinaryTides</p>
    </div>
    </div>
</footer>

<!-- Clear before page wrapper  -->
<div class="clear"></div>

</div>
<!-- #page -->

<!-- buysellads tag -->
<script type="text/javascript">
/*	(function(){
		var bsa_optimize=document.createElement('script');
		bsa_optimize.type='text/javascript';
		bsa_optimize.async=true;
		bsa_optimize.src='https://cdn4.buysellads.net/pub/binarytides.js?'+(new Date()-new Date()%600000);
		(document.getElementsByTagName('head')[0]||document.getElementsByTagName('body')[0]).appendChild(bsa_optimize);
	})();
	*/
	/*
	window.addEventListener("load",function(event) {
	
		var bsa_optimize=document.createElement('script');
		bsa_optimize.type='text/javascript';
		bsa_optimize.async=true;
		bsa_optimize.src='https://cdn4.buysellads.net/pub/binarytides.js?'+(new Date()-new Date()%600000);
		(document.getElementsByTagName('head')[0]||document.getElementsByTagName('body')[0]).appendChild(bsa_optimize);
		
		console.log('BuySellAds JS Element Added')
   }, false);
*/
	
</script>

<script async="" src="./Socket programming in C on Linux - The Ultimate Guide for Beginners - BinaryTides_files/f.txt"></script>


<!-- google analytics event tracking -->
<script type="text/javascript">

if(window.jQuery12)
{

jQuery(document).ready(function() {

jQuery('li.SPOSTARBUST-Related-Post a').click(function() 
{ 
	ga('send', 'event', 'clicks', 'related_posts_right', $(this).html(), {'nonInteraction': 1});
});
	
//For adverts and offers, save the href/link
jQuery('a.offer').click(function() 
{ 
//	_gaq.push(['_trackEvent', 'clicks', 'offer', $(this).attr('href') , 5, true]);
});

jQuery('.postBoxMidInner p img').closest('p').css('clear','both');


// detect ad blocking
if( jQuery('.adcontent').height() == 0 )
{
	// console.log('Sad. You have ad blocker enabled');
	ga('send', 'event', 'adblocks', 'adblocks', 'adblocks', {'nonInteraction': 1});

	// add some content to the empty ad area
}
});

}

</script><noscript><style>.lazyload{display:none;}</style></noscript><script data-noptimize="1">window.lazySizesConfig=window.lazySizesConfig||{};window.lazySizesConfig.loadMode=1;</script><script async="" data-noptimize="1" src="./Socket programming in C on Linux - The Ultimate Guide for Beginners - BinaryTides_files/lazysizes.min.js.download"></script>





<script defer="" src="./Socket programming in C on Linux - The Ultimate Guide for Beginners - BinaryTides_files/autoptimize_105d3abed4ebaf96f718d890e8a7793e.js.download"></script>
</body><iframe id="google_esf" name="google_esf" src="./Socket programming in C on Linux - The Ultimate Guide for Beginners - BinaryTides_files/zrt_lookup.html" style="display: none;"></iframe></html>